Question 1
The purpose of ir-virtual? is to simulate how assembly works but in racket form. Some of the pros of using ir-virtual? would be that it looks like an assembly and feels familiar. 
Another pro to using ir-virtual? is that it lays out all the steps of the assembly code. ir-virtual? is also an easier version to understand than x86. 
One of the cons of ir-virtual would be that it is too simplistic. It can also sometimes oversimplify processes. 


Question 2
We created three examples .ifa programs each running different tests using +, -, and if statements. 
Each test ran smoothly with each test case without errors or bugs. For example on example2 when running the input 37, the input gets desugared down to ifarith-tiny. 
After going through irarith-tiny it gets sent to and where it turns into a simple argument from there getting sent to ir-virtual which turns it into an assembly.
After turning into an assembly it gets sent down to x86 which is the stack allocation, where it spits out the nasm file which is the assembled file. 
The example files were placed into the test-program folder in the GitHub repo.

Example's ran:

1)
input: (* (+ 1 2) (+ 3 4))
output: 21

2)
input:37
output:37
3)
input: '(if 1 (print (+ 2 2 )) (print (+ 1 2)))
output:#t 
-
Question 3
If the input is 37 that means 37 is in the surface-level stage which gets put into the second 
stage. 
The second stage desugars it into 37 and from there goes into an administrative normal form which turns 
the input into a let (example: '(let ((x1254 37)) x1254). The next stage is ir-virtual which is the 
virtual assembly, which converts it into a simplified version of x86 with virtual registers (example: '(((label lab1255)
(mov-lit x1254 37)) (return x1254))). The second to last stage produces the actual x86 assembly with stack 
allocation and real registers after that the assembly file goes into a nasm. For example going from irarith 
to ifarith-tiny was very redundant because it produced the same input as the source. 

Question 4
Looking throughout the project we encountered many of the idioms we learned in class. Foldl was one of the idioms 
seen mainly in stage 5 of compiler.rkt. Lambda calculus is used to help us create a basis for how ifarith and ifarith-tiny
are supposed to function. Inside ifarith->ifarith-tiny match cases are used to contain all the cases needed when
going from ifarith to ifarith-tiny. Finally, another component of the function is the use of let and let* which 
we used in projects 3 and 4 to create binding cases for ifarith->ifarith-tiny.

Question 5
**April 26 at 2:31 pm initial bug for let* which was already done for us
**Changed the Let* and added quasi quoting which seemed to have fixed the issue
**A New Error appeared with an unbounded x we are looking into the cause of this issue
** The compiler.rkt doesn't support greater than when running .ifa. It gave the error "match: no matching clause 
for
('> 3 0). The argument given was (if (> 3 0) (+ 1 2) (- 7 5)), the argument should have ran 
but it gave us an error. 

High Level Reflection:

Throughout Project 5, we learned various topics involved in answering the five questions given to us and in creating the functions needed. 
An example of this was when we created three new ifa programs and ran them. What we discovered was that they compiled to what we expected them to. 

Some things we found interesting were the concepts of ir-virtual, we thought it was interesting to see how virtual registers be used to represent x86 registers/assembly. 
We also found it interesting that we could use Racket in general to develop a program that can compile high-level programs into assembly. Another thing we learned was the concept of desugaring and how itâ€™s used to make things simpler for the computer. 
A challenge we faced was finishing if-arith->ifarith-tiny and getting to compile the inputs, eventually, we were able to confront this challenge using our past projects as a reference to complete the function. 
We were able to use our debugging skills to be able to confront the challenges faced during this project.
We improved our coding logic and learned the concept of collaborative coding. Overall, we learned valuable lessons in code review that will help us in our future careers when working with a team.  
